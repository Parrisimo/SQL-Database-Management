/*
Daniel Parris 209336395
CETM75 Assignment 2 Task 1

TABLE OF CONTENTS
Line No			Description
41 				Table Creation
48					Customer
70					Product
81					Store
99					Transaction_Sale
107					Warehouse_Item
119					Delivery
130				Data Insertion
132					Customer
193					Product
330					Store
348					Transaction_Sale
851					Warehouse_Item
873					Delivery
975				Functions and Procedures
976					get_ID
996					register_customer
1084				get_transaction_ID
1102				check_stock
1123				get_delivery_ID
1141				purchase_product
1272				transfer_stock
1355				generate_report				
1299			Testing Block
1419				register_customer
1470				purchase_product
1507				transfer_stock
1528				generate_report
1549 			Python code for generating transaction data
*/




DROP TABLE IF EXISTS Delivery;
DROP TABLE IF EXISTS Transaction_Sale;
DROP TABLE IF EXISTS Warehouse_Item;
DROP TABLE IF EXISTS Customer;
DROP TABLE IF EXISTS Product;
DROP TABLE IF EXISTS Store;

CREATE TABLE Customer
(Customer_ID SMALLINT NOT NULL PRIMARY KEY,
Customer_Surname VARCHAR(20) NOT NULL,
Customer_Forename VARCHAR(20) NOT NULL,
Customer_Phone VARCHAR(11) NOT NULL,
Customer_House_No_Name VARCHAR(20) NOT NULL,
Customer_Street VARCHAR(30) NOT NULL,
Customer_Town VARCHAR(30) NOT NULL,
Customer_County VARCHAR(26) NOT NULL,
Customer_Postcode VARCHAR(7) NOT NULL,
--setting a constraint so that rows of duplicate information (except the ID number) cannot be put into the table
--https://www.w3schools.com/sqL/sql_unique.asp
CONSTRAINT Customer_details_must_be_unique UNIQUE (
	Customer_Surname,
	Customer_Forename,
	Customer_Phone,
	Customer_House_No_Name,
	Customer_Street,
	Customer_Town,
	Customer_County,
	Customer_Postcode));

CREATE TABLE Product
(Product_ID INT NOT NULL PRIMARY KEY,
Product_Type CHAR(1) NOT NULL,
Product_Name VARCHAR(100) NOT NULL,
Product_Cost DECIMAL(8,2) NOT NULL,
Product_Description TEXT,
CONSTRAINT Product_details_must_be_unique UNIQUE (
	Product_Type,
	Product_Name,
	Product_Cost));

CREATE TABLE Store
(Store_ID SMALLINT NOT NULL PRIMARY KEY,
Store_Name VARCHAR(20) NOT NULL,
Store_Building_No_Name VARCHAR(20) NOT NULL,
Store_Street VARCHAR(30) NOT NULL,
Store_Town VARCHAR(30) NOT NULL,
Store_County VARCHAR(26) NOT NULL,
Store_Postcode VARCHAR(7) NOT NULL,
Store_Phone VARCHAR(11) NOT NULL,
CONSTRAINT Store_details_must_be_unique UNIQUE (
	Store_name,
	Store_Phone,
	Store_Building_No_Name,
	Store_Street,
	Store_Town,
	Store_County,
	Store_Postcode));

CREATE TABLE Transaction_Sale
(Transaction_ID BIGINT NOT NULL PRIMARY KEY,
Customer_ID SMALLINT NOT NULL REFERENCES Customer(Customer_ID),
Product_ID INT NOT NULL REFERENCES Product(Product_ID),
Product_Cost DECIMAL(8,2) NOT NULL,
Store_ID SMALLINT NOT NULL REFERENCES Store(Store_ID),
Transaction_Date DATE NOT NULL);

CREATE TABLE Warehouse_Item
(Store_ID SMALLINT NOT NULL REFERENCES Store(Store_ID),
Product_ID INT NOT NULL REFERENCES Product(Product_ID),
Product_Quantity SMALLINT NOT NULL,
PRIMARY KEY(Product_ID, Store_ID),
CONSTRAINT Only_one_entry_per_store_and_product_combination UNIQUE (
	Store_ID,
	Product_ID));

--I decided to create a separate table for Deliveries as not every sale will involve a delivery and adding
--delivery columns to the transaction_sale table would generate a lot of null values where customers
--are buying the items in store and immediately taking them home
CREATE TABLE Delivery
(Delivery_ID BIGINT NOT NULL PRIMARY KEY,
Transaction_ID BIGINT NOT NULL REFERENCES Transaction_Sale(Transaction_ID),
Delivery_date DATE NOT NULL,
Delivery_hour SMALLINT NOT NULL,
CONSTRAINT Only_one_delivery_per_hour UNIQUE (
	Delivery_Date,
	Delivery_Hour));
	


--names generated by https://www.name-generator.org.uk/quick/
--addresses generated by https://www.doogal.co.uk/RandomAddresses.php
INSERT INTO Customer
VALUES(1, 'Scott', 'Barry', '01372270221', '45', 'Sidney Road', 'Brighton', 'East Sussex', 'BN23JY');

INSERT INTO Customer
VALUES(2, 'Bateman', 'Elisabeth ', '01642173856', '2', 'Saltney Road', 'Stockton-On-Tees', 'County Durham', 'TS201FD');

INSERT INTO Customer
VALUES(3, 'Cannon ', 'Felicia ', '01923868577', '7', 'Brearley Close', 'Edgware', 'Greater London', 'HA89YT');

INSERT INTO Customer
VALUES(4, 'Cano', 'Kiyan ', '01526751701', '3', 'Ebrington Close', 'Woodhall Spa', 'Lincolnshire', 'LN106YB');

INSERT INTO Customer
VALUES(5, 'Delarosa', 'Bartosz ', '01668611241', '1', 'New Cottages Middleton Hall', 'Wooler', 'Northumberland', 'NE716RD');

INSERT INTO Customer
VALUES(6, 'Viaan', 'Cline', '01482280262', '23', 'Greenfield Avenue', 'Hessle', 'East Riding of Yorkshire', 'HU130FS');

INSERT INTO Customer
VALUES(7, 'Crouch', 'Garfield', '01458613464', '14', 'Danes Lea', 'Wedmore', 'Somerset', 'BS284AX');

INSERT INTO Customer
VALUES(8, 'Head', 'Lia', '01386553814', '16', 'Saxonfields', 'Bidford On Avon', 'Warwickshire', 'B504BS');

INSERT INTO Customer
VALUES(9, 'Russell', 'Roisin', '01225348536', '22', 'Middlehill', 'Box', 'Wiltshire', 'SN138QW');

INSERT INTO Customer
VALUES(10, 'Walton', 'Korben', '01287662737', '5', 'Coastguard Cottages', 'Saltburn-By-The-Sea', 'North Yorkshire', 'TS121HG');

INSERT INTO Customer
VALUES(11, 'Russo', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');

INSERT INTO Customer
VALUES(12, 'Jarvis', 'Corona', '01684307800', '5', 'Orchard Close', 'Upton Upon Severn', 'Worcestershire', 'WR80QH');

INSERT INTO Customer
VALUES(13, 'Hills', 'Alia ', '01900661542', '12', 'Park Road', 'Sheffield', 'South Yorkshire', 'S65PD');

INSERT INTO Customer
VALUES(14, 'Castillo', 'Aarav', '07722345832', 'Winder Farm', 'Main Street', 'Dearham', 'Cumbria', 'CA157JG');

INSERT INTO Customer
VALUES(15, 'Serrano', 'Isla-Rae', '01252084744', '2', 'Pine Court', 'Mytchett', 'Surrey', 'GU166EB');

INSERT INTO Customer
VALUES(16, 'Cousins', 'Farzana', '01210352841', '269', 'Monmouth Drive', 'Sutton Coldfield', 'Birmingham', 'B736JU');

INSERT INTO Customer
VALUES(17, 'Ryder', 'Mihai', '01376358586', '1', 'Windsor Gardens', 'Braintree', 'Essex', 'CM79LD');

INSERT INTO Customer
VALUES(18, 'Weiss', 'Marlon', '01322836517', '62', 'Leatherbottle Green', 'Erith', 'Kent', 'DA184HP');

INSERT INTO Customer
VALUES(19, 'Watson', 'Amber', '07104625608', '4', 'Belhaven Road', 'Liverpool', 'Merseyside', 'L181HH');

INSERT INTO Customer
VALUES(20, 'Weaver', 'Claudia', '01923737065', '23', 'Fairfield Avenue', 'Watford', 'Hertfordshire', 'WD197AS');

--product information taken from https://www.gak.co.uk/
INSERT INTO Product
VALUES(1, 'I', 'Squier Paranormal Series Super-Sonic, Shell Pink', 344.00, 'The Squier Paranormal Series is a range of unique and quirky guitars and basses, featuring altered specs, once-forgotten shapes and classic/vintage hybrids and come in a range of finishes.

The Squier Paranormal Super-Sonic is one of the most unique models of the series with its reverse body shape and headstock.

The Super-Sonic has a lightweight poplar body and a short 24” scale length and narrow 40mm nut width, making it great for those with smaller fingers. It also has a durable bolt-on maple neck with a comfortable ‘C’-shaped profile and a silky gloss finish. The fretboard is made of Indian laurel with 22 ‘narrow tall’ frets and a 9.5” radius making it easy and comfortable to play.

The Paranormal Super-Sonic has a 6-saddle vintage-style synchronised tremolo bridge. This is paired with vintage-style tuning machines to deliver solid tuning stability and smooth action.

For pickups, it has a pair of punchy Atomic humbuckers that deliver amazing clarity when used with distortion. The neck humbucker is bright, while the bridge humbucker delivers a rich and sharp attack without sounding too brash.' );

INSERT INTO Product
VALUES(2, 'I', 'Yamaha P-45 Digital Piano', 354.00, 'Easily our best selling digital piano, the Yamaha P45 is an outstanding digital piano for the money. Offering you the responsive, authentic feel of an acoustic piano, the P45 compares in both sound and playability with many of the more expensive alternatives in the digital piano range.

The P45 is the entry-level piano of this range, with its compact size, affordability and 88 keys, it’s great for beginners who want to get stuck in and learn on a good-quality instrument. The P45 has an 88-key Graded Hammer Standard keyboard, which lets you enjoy the natural feel of an acoustic piano, with matte black key tops (to prevent your fingers from slipping) and a slick black casing.

The P45 has 10 different instrument sounds - 2 Grand Pianos, 2 electric pianos, 2 pipe organs, 2 harpsichords, strings, and vibraphone, which is enough to satisfy a beginner, and still covers the basic sounds that every player might use. It uses AWM (Advanced Wave Memory) stereo sampling, which is where digital technology is used to record a specific sound numerous times with different playing strengths, with high-quality digital filters applied after. This means it sounds more like an acoustic piano, effectively imitating how the keys sound different depending on how hard they are pressed. You can also choose from 4 different reverbs - Room, Hall 1, Hall 2, and Stage, for which you can also adjust the depth.

The P45 is a great option for students, teachers, beginners, and children. The two 6W amplifiers mean it’s loud enough to practice in a small room, but not for live gigs with other instruments, or in larger rooms.

The Yamaha P45 comes with a music rest, footswitch and a 12V mains power supply.');

INSERT INTO Product
VALUES(3, 'I', 'Fender Custom Shop 1952 Telecaster Heavy Relic, Texas Tea', 3849.00, 'This gorgeous Telecaster has been created by the acclaimed Fender Custom Shop luthiers, who are known for crafting some of the finest instruments in the world. Featuring a luxurious “black gold” Texas Tea finish and a vintage spec, this Tele combines an old-school sensibility with a sleek, modern look.

Vintage Feel & Sound
Based on a 1952 Tele, this Fender Custom Shop guitar has an undeniably classic look and feel. This is enhanced by the lovely Quarter Sawn neck, which is constructed from one piece of Maple. The neck’s robust 51 U profile provides a substantial playing experience whilst fattening up the tone. If you’re a player that uses a lot of expressive bends and vibrato, you’ll love the vintage-style Narrow Tall 6105 frets.

The period-correct Ash body is what gives this Tele it’s highly resonant and clear natural voice. It’s coated in a nitrocellulose lacquer, which promotes sustain by helping the guitar to “breathe” and looks better as it ages. The Texas Tea finish is something special, transitioning from a sleek black to a glorious gold depending on the lighting.

Gorgeous Worn-In Look
This Telecaster has been the Custom Shop’s Relic treatment, a skilful process that gives it the timeless look of a well-played instrument. From the aged hardware to the authentic playing wear, every part of this Tele has a story to tell.

Classic Tele Tone
Providing the iconic Tele sounds are a pair of premium pickups, which are controlled via Modern Tele wiring. The bridge is equipped with a 51 Nocaster, which has the chime and twang that you’d expect from a sought-after vintage Telecaster. It’s complemented by the Twisted Tele neck pickup, which has a focussed mid-range and a glassiness that promotes note definition.

Modern Reliability
Thanks to Fender Custom Shop’s world-class craftsmanship and their use of top-notch components, this Tele is as dependable as a modern workhorse whilst retaining all the best elements of a vintage instrument. If you love 50s Telecasters, this is a great solution for your live performance or studio session as it doesn’t require the constant maintenance of an older guitar.

The Fender Custom Shop has once again delivered a jaw-dropping Telecaster that more than lives up to the Fender legacy. Boasting a sophisticated Texas Tea finish and an authentic 50s spec, once you’ve picked this Tele up - you’ll find it hard to put it down!');

INSERT INTO Product
VALUES(4, 'I', 'Universal Audio Apollo Twin MKII Heritage Edition Thunderbolt Audio Interface, DUO', 849.00, 'Apollo Twin are desktop audio interfaces that are great for beginners and musicians who want to discover the world of recording and producing music and have more of a budget to buy premium interfaces. They’re ideal for people who only need to record guitar and vocals, for example. The Apollo Twin, Apollo Twin MKII, and Apollo Twin X which comes with Duo or Quad Core processing.

Want to record like the pros? Only Apollo Twin and Arrow audio interfaces let you shape your recordings into records with genuine UA conversion and free classic studio sounds like Antares Auto-Tune Realtime Advanced, Manley VOXBOX, UA Oxide & Pure Plate plug-ins and more.

The Apollo Twin Duo MKII from Universal Audio is a complete redesign of their popular 2x6 Thunderbolt audio interface. The interface features fantastic onboard UAD-2 DUO Core processing, Unison technology and next-generation A/D and D/A conversion.

What does the Apollo Twin Duo do?

The Apollo Twin Duo audio interfaces give you the ability to connect professional microphones, instruments and other kinds of signals to a computer, and output a variety of signals as well. The duo gives you a whole host of UA plug-ins and versatile preamps. The interface helps to take your recording setup to the next level with its impressive sound quality.

What’s new in the MKII?

The MKII offers more DSP power than its predecessor, upgraded A-D/D-A conversion and also offers you an increased dynamic range. The unit also now comes in a sleek black design, which matches UA’s Apollo rackmount range.

What plug-ins come with the Apollo Twin?

The interface comes complete with the UAD Analog Classics plug-ins software bundle, with a fantastic choice of plug-ins to utilise in your DAW of choice.

Can I use multiple Apollo units together in the same system?

Yes, you can combine two Apollo interfaces into a single elegant system via FireWire or Thunderbolt. This allows you to record double the amount of instruments/mics, perfect for a full band.');

INSERT INTO Product
VALUES(5, 'I', 'Tama MA42TZSBN-MEB Starclassic Maple 4pc Drum Shell Pack, Molten Electric Blue Burst', 2100.00, 'Tama Starclassic Maple 4 Piece Shell Pack, Molten Electric Blue Burst

Lacquer Finish

Configuration, 22x16in Bass, 10x7in, 12x8in Toms, 16x16in Floor Tom.

In the 80s TAMAs Superstars and Imperialstars reigned supreme - the perfect drums for the times. But TAMAs builders and designers wanted something that transcended trends, something timeless - drums that understood a players passion and allowed the expression of every genre, style, mood, and technique. They created Starclassic Maple drums...and ignited the thin-shell revolution. And now the new Exotic Finish line offers beautiful, one-of-a-kind exotic wood exteriors for that extra luxurious touch.

Numerous options are available to meet the varied and critical needs of professional drummers including a selection of more than 30 different shell sizes. Starclassic Maple also features three shell hardware finishes to choose from: Black Nickel, Chrome and Smoked Black Nickel. Starclassic Maple is simply an unprecedented combination of sight and sound.

Please note, cymbals, hardware and tom mount are not included, this is a shell pack only.');

INSERT INTO Product
VALUES(6, 'I', 'Charvel Pro-Mod San Dimas Bass PJ IV, Lime Green Metallic', 799.00, 'For the seasoned player who defies the status quo and demands more from a high-performance hot rod bass, the brand-new Charvel® Pro-Mod San Dimas® Bass PJ IV does it all by combining modern appointments with throwback Charvel DNA.

The sleek alder body shape is a familiar one—straight from the original Charvel San Dimas basses of late 1970s, with the deeper cutaway that gave adventurous bassists effortless upper-register access.The super-thin bolt-on maple Charvel speed neck is crafted in the original style, with a gorgeous caramelized treatment, graphite reinforcement and heel-mount truss rod wheel for easy adjustment. The 12”-16” compound radius caramelized maple fingerboard gradually flattens from nut to heel for fast, smooth playing, and has rolled edges, 20 jumbo frets and Luminlay® side dots.And like the originals, the Pro-Mod San Dimas Bass PJ IV features the powerhouse voice of DiMarzio® pickups—a Model J™ at the bridge for well-rounded punch and a Model P® in the middle for warm and fat tone with a mid-range growl when pushed.Versatile electronics include master volume, pickup blend and active three-band active EQ, while a Charvel HiMass™ bridge, Graph Tech® TUSQ® XL nut and open-gear tuners combine for stellar tuning stability with improved note punch and sustain.This 4-string bass is presented in electrifying Lime Green Metallic and Mystic Blue finishes with chrome hardware, cream pickup covers and licensed Fender® Precision Bass® headstock shape.');

INSERT INTO Product
VALUES(7, 'I', 'Fender Custom Shop Limited Edition Mike McCready 1960 Stratocaster, Faded 3-Colour Sunburst', 13399.00, 'Pearl Jam’s Mike McCready has earned his place among the giants of rock ‘n’ roll guitar. Best known for playing a ’59 Strat, his searing leads are steeped in blues and classic rock reminiscent of Jimi Hendrix, Pete Townshend and Keith Richards, and his peerless work on hits, including “Yellow Ledbetter”, “Even Flow”, “Nothing As It Seems” and countless others, helped pave the way for Pearl Jam’s 2017 induction into the Rock & Roll Hall of Fame. McCready’s guitar work in Seattle supergroups Temple of the Dog and Mad Season also featured instantly recognizable Strat riffs, such as those heard on “Hunger Strike” and “River of Deceit”.

Inspired by Stevie Ray Vaughan, McCready set out early on to acquire his own ’59 Strat, and, serendipitously, with his first ever vintage guitar purchase, he found “the one” that has been his primary Fender instrument ever since. Now some 28 years later, McCready’s iconic Strat can be heard featured on tracks “Superblood Wolfmoon” and “Dance Of The Clairvoyants” from Pearl Jam’s most recent studio LP, Gigaton. In this first-time collaboration between Fender and McCready, the Fender Custom Shop is honored to re-create this incredible instrument in exact detail, and in doing so a long held secret about the guitar’s lineage was forced to be revealed to its owner: the Strat was actually constructed in 1960, not 1959 as had long been believed.

For this limited 60-piece Masterbuilt run, the Custom Shop’s Vincent Van Trigt carefully disassembled the guitar in order to note and measure every detail, curve and scratch - and there are plenty of scratches, thanks to McCready’s exuberant style! The recreation features an ultimate Relic lacquer finish on a two-piece select alder body; a flat-sawn flame maple neck with a 1960 “oval C” profile; and a flat-lam rosewood fingerboard with 21 vintage frets. Custom Josefina hand-wound pickups matched to the originals are connected to a five-way switch and vintage wiring, including a “treble bleed” tone capacitor. Other features include a three-ply vinyl pickguard, vintage-style synchronized tremolo with Callaham bridge block, vintage-style tuning machines, bone nut, and wing string tree with metal spacer. Includes deluxe hardshell case, strap, polishing cloth, McCready case candy kit and certificate of authenticity.');

INSERT INTO Product
VALUES(8, 'I', 'Pioneer DJ XDJ-1000MK2 Digital DJ Deck', 1159.00, 'Based on its predecessor, the XDJ-1000MK2 improves usability through enhanced track browsing and support for high-resolution FLAC and ALAC audio files. It inherits the large jog wheel and 7-inch, full-colour touch screen from the CDJ-2000NXS2, as well as features such as 8 Hot Cues and Quantize. The XDJ-1000MK2 also retains key features from before, including the Qwerty touch-screen keyboard for keyword searches, and the large rotary dial for scrolling. Plus, you can colour-code your USB devices and the illuminated USB port will reflect that colour, so you instantly know what’s on each device.');

INSERT INTO Product
VALUES(9, 'I', 'Allen & Heath XONE 96 Professional DJ Mixer', 1399.00, 'The Allen & Heath Xone:96 Analogue DJ Mixer is the highly anticipated follow up to the world-renown Xone:92, a DJ mixer favoured by clubs and venues around the world.

The Xone:96 is described by the folks at Allen & Heath as an "uncompromising analogue DJ mixer, destined to be the heart of our creativity" and it is easy to see why this statement is true when you take a look at what the 96 has to offer.

The Allen & Heath Xone: 96 packs a substantial amount of power and intuitive features, first and foremost the 96 has been built with the same legendary Xone analogue design that has cemented Allen & Heath as a front-runner in the world of DJ equipment. The mixer features a large 6 + 2 channel layout, 4-band EQ, dual Xone:VCF filters with CRUNCH harmonic distortion and a dual 32-bit USB soundcard. The Xone: 96 has been designed to allow you to connect your entire DJ rig including Decks/media players, turntables, laptops and even additional audio inputs such as pedals and synths for live performances. An evolution of an industry legend, the 96 bring new and innovative features to a mixer series loved by millions for its industrial build quality and superbly smooth controls.

The Xone:96 continues Allen & Heaths lineage of powerful analogue mixers, the much-loved layout of the Xone:92 is apparent in this latest Xone incarnation, the 96 houses four stereo input channels each equipped with Allen & Heaths class-leading Xone 4-band EQ controls. The Xone:96 also sports two A + B stereo return/ mic channels with all-new 3-band parametric EQs that give you even more control over your sound.');

INSERT INTO Product
VALUES(10, 'I', 'Adam Audio SP-5 Studio Pro Headphones', 349.00, 'The ADAM Audio STUDIO PRO SP-5 headphones are the result of collaboration between two engineering-focused German companies, ADAM Audio and Ultrasone. Both firms are run by professionals who are passionate about creating products that offer the best possible audio reproduction. During the product’s design, the ADAM SP-5’s components were carefully selected, iteratively re-voiced and tuned, and changes were made to its diaphragm and housing based on direction from ADAM Audio’s engineers, until the headphones’ sound and tonality was right and carrying the renowned ADAM Audio sonic signature.');


--Sheet Music information taken from https://www.musicroom.com
INSERT INTO Product
VALUES(11, 'M', 'FROZEN: PIANO, VOCAL AND GUITAR', 16.99, 'FROZEN has been called one of Disneys greatest musicals of all time - high praise indeed. This souvenir songbook features 11 songs as penned by up-and-coming songwriters Robert Lopez and Kristen Anderson-Lopez, plus colour artwork from Disneys 2014 release.' );

INSERT INTO Product
VALUES(12, 'M', 'GARY BARLOW: MUSIC PLAYED BY HUMANS', 15.29, 'All the songs from Gary Barlow’s fifth solo album, Music Played By Humans accompanied by a specially written preface from Gary. Each song is arranged for piano, voice and guitar with chord symbols, chord diagrams and full lyrics.');

INSERT INTO Product
VALUES(13, 'M', 'TAYLOR SWIFT - FOLKLORE', 16.99, '17 songs from Swifts 2020 surprise release of piano and guitar tunes which she wrote and recorded during the COVID-19 pandemic. Songs include: Betty · Cardigan · Exile (feat. Bon Iver) · Illicit Affairs · The Lakes · The Last Great American Dynasty · Mad Woman · The 1 · Peace · and more.');

INSERT INTO Product
VALUES(14, 'M', 'THE BEST CHRISTMAS SONGBOOK EVER: PIANO, VOCAL AND GUITAR', 15.99, 'All your favourite songs and carols in one wonderful, carefully selected edition. Newly arranged and engraved for Piano, Voice and Guitar, these 49 songs set the mood for the festive season. Every member of the family is catered for, young and old, with a selection of favourites.');

INSERT INTO Product
VALUES(15, 'M', 'QUEEN: REALLY EASY PIANO: QUEEN: EASY PIANO', 11.50, 'This volume features 20 Queen classics, including: Another One Bites the Dust • Bohemian Rhapsody • Crazy Little Thing Called Love • I Want It All • Killer Queen • Somebody to Love • Under Pressure • We Will Rock You • You are My Best Friend • and more. ');

INSERT INTO Product
VALUES(16, 'M', 'ABBA: MAMMA MIA! - HERE WE GO AGAIN: PIANO, VOCAL AND GUITAR', 15.50, 'This 2018 sequel/prequel to the popular 2008 film of the same name again features the music of ''70s pop sensation ABBA. Our matching songbook includes the songs: Andante, Andante - Angel Eyes - Dancing Queen - Day Before You Came - Fernando - I Have a Dream - I Wonder (Departure)');

INSERT INTO Product
VALUES(17, 'M', 'ELTON JOHN: ELTON JOHN - GREATEST HITS 1970-2002: PIANO, VOCAL AND GUITAR', 16.99, 'This fabulous collection features 34 of Elton''s all-time greatest hits arranged for Piano, Voice and Guitar. ');

INSERT INTO Product
VALUES(18, 'M', '150 OF THE BEST JAZZ STANDARDS EVER: PIANO, VOCAL AND GUITAR', 27.99, 'A great selection of 150 of the best jazz songs, standards and swinging classics of all time! All songs are specially arranged for piano, voice, and guitar. Includes: Aint Misbehavin, Dont Get Around Much Anymore, Fly Me To The Moon, God Bless The Child');

INSERT INTO Product
VALUES(19, 'M', 'NEIL DIAMOND: THE ESSENTIAL NEIL DIAMOND: PIANO, VOCAL AND GUITAR', 25.50, '39 of Diamond''s definitive hits, including: America, Brother Love''s Traveling Salvation Show, Cracklin'' Rosie, Forever in Blue Jeans, Girl, You''ll Be a Woman Soon, He Ain''t Heavy and more.');

INSERT INTO Product
VALUES(20, 'M', '100 YEARS OF POPULAR MUSIC 60S VOL. 1: PIANO, VOCAL AND GUITAR', 19.99, '100 Years Of Popular Music 1960''s. Includes, What a wonderful world, I can''t stop loving you, Everybody''s talkin'' and more. Volume 1, arranged for piano, voice, and guitar.');

--Store addresses taken from Google, existing music stores
INSERT INTO Store
VALUES(1, 'London', '4', 'Denmark Street', 'London', 'Greater London', 'WC2H8LP', '02073796111');

INSERT INTO Store
VALUES(2, 'Newcastle', '3', 'Old George Yard', 'Newcastle Upon Tyne', 'Tyne and Wear', 'NE11EZ', '01912614056');

INSERT INTO Store
VALUES(3, 'Sheffield', '238', 'London Road', 'Sheffield', 'South Yorkshire', 'S24LW', '01142580497');

INSERT INTO Store
VALUES(4, 'Essex', '95', 'High Street', 'Chelmsford', 'Essex', 'CM11DX', '01245283527' );

INSERT INTO Store
VALUES(5, 'Birmingham', '8', 'Priory Queensway', 'Birmingham', 'West Midlands', 'B46BS', '01212129010' );

--For the Transaction_Sale table I wrote some code in python to auomatically/randomly generate a large volume of transactions
--in order to populate the database. The python code is appended at the very bottom of this file. 

INSERT INTO Transaction_Sale VALUES
(1,9,5,2199.00,5,'2019-01-01'),
(2,12,10,349.00,4,'2019-01-02'),
(3,8,19,22.95,3,'2019-01-04'),
(4,8,13,16.99,3,'2019-01-05'),
(5,3,4,849.00,1,'2019-01-06'),
(6,12,1,344.00,4,'2019-01-08'),
(7,18,13,16.99,4,'2019-01-09'),
(8,1,1,316.48,1,'2019-01-11'),
(9,2,2,318.60,2,'2019-01-11'),
(10,20,2,354.00,1,'2019-01-11'),
(11,2,8,1159.00,2,'2019-01-12'),
(12,16,17,15.29,5,'2019-01-12'),
(13,7,9,1399.00,1,'2019-01-14'),
(14,2,5,2199.00,2,'2019-01-14'),
(15,2,19,25.50,2,'2019-01-14'),
(16,14,18,2799.00,4,'2019-01-15'),
(17,19,3,3849.00,3,'2019-01-15'),
(18,10,6,799.00,3,'2019-01-17'),
(19,2,13,15.97,2,'2019-01-19'),
(20,2,19,25.50,2,'2019-01-20'),
(21,12,18,2799.00,4,'2019-01-22'),
(22,16,7,12193.09,5,'2019-01-23'),
(23,19,5,2199.00,3,'2019-01-24'),
(24,9,1,344.00,5,'2019-01-24'),
(25,10,13,16.99,3,'2019-01-24'),
(26,1,2,332.76,1,'2019-01-26'),
(27,9,17,15.29,5,'2019-01-27'),
(28,15,20,19.99,1,'2019-01-29'),
(29,10,1,316.48,3,'2019-01-30'),
(30,2,3,3849.00,2,'2019-02-01'),
(31,13,2,354.00,3,'2019-02-01'),
(32,10,9,1399.00,3,'2019-02-03'),
(33,3,9,1399.00,1,'2019-02-05'),
(34,6,5,2089.05,3,'2019-02-07'),
(35,19,11,15.63,3,'2019-02-09'),
(36,16,9,1399.00,5,'2019-02-11'),
(37,20,4,849.00,1,'2019-02-12'),
(38,20,14,15.99,1,'2019-02-13'),
(39,1,18,2799.00,1,'2019-02-14'),
(40,3,12,15.29,1,'2019-02-14'),
(41,9,8,1054.69,5,'2019-02-14'),
(42,6,17,16.99,3,'2019-02-16'),
(43,19,16,15.50,3,'2019-02-17'),
(44,1,4,849.00,1,'2019-02-17'),
(45,16,3,3849.00,5,'2019-02-19'),
(46,17,4,849.00,4,'2019-02-21'),
(47,19,19,25.50,3,'2019-02-23'),
(48,14,4,849.00,4,'2019-02-23'),
(49,17,1,344.00,4,'2019-02-23'),
(50,8,17,15.63,3,'2019-02-25'),
(51,15,8,1159.00,1,'2019-02-26'),
(52,5,17,16.99,2,'2019-02-28'),
(53,17,4,772.59,4,'2019-02-28'),
(54,16,14,15.99,5,'2019-03-02'),
(55,9,2,354.00,5,'2019-03-03'),
(56,19,15,11.50,3,'2019-03-05'),
(57,15,19,25.50,1,'2019-03-06'),
(58,14,14,15.99,4,'2019-03-06'),
(59,16,19,23.46,5,'2019-03-07'),
(60,4,5,2023.08,1,'2019-03-08'),
(61,11,11,16.99,5,'2019-03-09'),
(62,2,4,849.00,2,'2019-03-11'),
(63,10,13,16.99,3,'2019-03-11'),
(64,16,6,799.00,5,'2019-03-12'),
(65,7,14,15.99,1,'2019-03-14'),
(66,8,2,354.00,3,'2019-03-14'),
(67,7,4,849.00,1,'2019-03-16'),
(68,13,10,314.10,3,'2019-03-17'),
(69,12,18,2575.08,4,'2019-03-17'),
(70,2,7,13399.00,2,'2019-03-17'),
(71,18,3,3849.00,4,'2019-03-19'),
(72,2,3,3849.00,2,'2019-03-20'),
(73,3,15,10.81,1,'2019-03-21'),
(74,17,14,15.19,4,'2019-03-21'),
(75,13,18,2799.00,3,'2019-03-22'),
(76,1,13,16.99,1,'2019-03-22'),
(77,11,13,16.99,5,'2019-03-23'),
(78,9,19,22.95,5,'2019-03-23'),
(79,16,13,16.99,5,'2019-03-24'),
(80,17,20,19.99,4,'2019-03-24'),
(81,14,10,331.55,4,'2019-03-24'),
(82,19,4,849.00,3,'2019-03-25'),
(83,17,5,2199.00,4,'2019-03-26'),
(84,6,12,15.29,3,'2019-03-27'),
(85,4,16,15.50,1,'2019-03-27'),
(86,15,11,16.99,1,'2019-03-29'),
(87,13,17,16.99,3,'2019-03-31'),
(88,14,5,2089.05,4,'2019-04-02'),
(89,6,18,2659.05,3,'2019-04-02'),
(90,16,15,11.50,5,'2019-04-03'),
(91,19,20,19.99,3,'2019-04-05'),
(92,4,1,319.92,1,'2019-04-05'),
(93,10,6,799.00,3,'2019-04-07'),
(94,4,17,16.99,1,'2019-04-09'),
(95,1,7,12461.07,1,'2019-04-09'),
(96,16,20,19.99,5,'2019-04-10'),
(97,20,4,798.06,1,'2019-04-12'),
(98,18,8,1159.00,4,'2019-04-14'),
(99,3,7,13399.00,1,'2019-04-14'),
(100,4,1,344.00,1,'2019-04-14'),
(101,12,13,16.14,4,'2019-04-16'),
(102,15,5,2199.00,1,'2019-04-17'),
(103,5,8,1159.00,2,'2019-04-17'),
(104,9,14,15.99,5,'2019-04-17'),
(105,10,1,344.00,3,'2019-04-18'),
(106,7,5,2199.00,1,'2019-04-18'),
(107,10,5,2199.00,3,'2019-04-19'),
(108,15,11,15.29,1,'2019-04-21'),
(109,19,8,1159.00,3,'2019-04-23'),
(110,8,2,354.00,3,'2019-04-24'),
(111,8,14,15.99,3,'2019-04-26'),
(112,2,7,13399.00,2,'2019-04-28'),
(113,19,19,25.50,3,'2019-04-28'),
(114,7,16,15.50,1,'2019-04-30'),
(115,17,18,2799.00,4,'2019-05-02'),
(116,1,3,3579.57,1,'2019-05-04'),
(117,12,17,16.99,4,'2019-05-05'),
(118,5,12,13.76,2,'2019-05-07'),
(119,15,6,799.00,1,'2019-05-09'),
(120,11,19,23.21,5,'2019-05-10'),
(121,15,2,354.00,1,'2019-05-11'),
(122,16,1,344.00,5,'2019-05-12'),
(123,16,1,319.92,5,'2019-05-14'),
(124,15,15,11.50,1,'2019-05-15'),
(125,17,20,19.99,4,'2019-05-17'),
(126,16,9,1399.00,5,'2019-05-18'),
(127,18,19,25.50,4,'2019-05-18'),
(128,20,10,328.06,1,'2019-05-19'),
(129,8,18,2799.00,3,'2019-05-20'),
(130,7,6,799.00,1,'2019-05-22'),
(131,16,8,1159.00,5,'2019-05-24'),
(132,20,6,719.10,1,'2019-05-26'),
(133,3,14,15.99,1,'2019-05-26'),
(134,9,1,344.00,5,'2019-05-27'),
(135,9,20,18.99,5,'2019-05-27'),
(136,7,17,15.97,1,'2019-05-29'),
(137,19,14,15.99,3,'2019-05-31'),
(138,5,17,16.99,2,'2019-05-31'),
(139,12,18,2547.09,4,'2019-05-31'),
(140,19,1,326.80,3,'2019-05-31'),
(141,2,7,13399.00,2,'2019-06-01'),
(142,2,11,16.99,2,'2019-06-03'),
(143,9,10,321.08,5,'2019-06-04'),
(144,11,10,349.00,5,'2019-06-05'),
(145,5,1,344.00,2,'2019-06-07'),
(146,1,19,25.50,1,'2019-06-08'),
(147,18,3,3849.00,4,'2019-06-08'),
(148,15,2,354.00,1,'2019-06-10'),
(149,1,13,16.99,1,'2019-06-11'),
(150,1,13,16.99,1,'2019-06-11'),
(151,3,18,2575.08,1,'2019-06-13'),
(152,10,11,16.99,3,'2019-06-14'),
(153,1,7,13399.00,1,'2019-06-15'),
(154,12,3,3849.00,4,'2019-06-16'),
(155,9,7,12595.06,5,'2019-06-17'),
(156,20,16,15.50,1,'2019-06-18'),
(157,13,13,16.99,3,'2019-06-20'),
(158,1,12,15.29,1,'2019-06-22'),
(159,7,3,3541.08,1,'2019-06-24'),
(160,15,14,15.99,1,'2019-06-25'),
(161,7,8,1159.00,1,'2019-06-26'),
(162,18,11,16.99,4,'2019-06-26'),
(163,18,1,344.00,4,'2019-06-26'),
(164,1,3,3849.00,1,'2019-06-27'),
(165,11,2,354.00,5,'2019-06-27'),
(166,14,12,14.22,4,'2019-06-27'),
(167,17,10,349.00,4,'2019-06-29'),
(168,3,1,309.60,1,'2019-06-30'),
(169,2,12,14.37,2,'2019-07-01'),
(170,17,20,19.99,4,'2019-07-01'),
(171,8,19,25.50,3,'2019-07-01'),
(172,2,18,2799.00,2,'2019-07-02'),
(173,16,19,23.46,5,'2019-07-04'),
(174,18,9,1399.00,4,'2019-07-06'),
(175,15,5,2199.00,1,'2019-07-07'),
(176,7,7,13399.00,1,'2019-07-07'),
(177,5,18,2799.00,2,'2019-07-07'),
(178,2,12,15.29,2,'2019-07-09'),
(179,6,1,344.00,3,'2019-07-11'),
(180,17,14,15.19,4,'2019-07-13'),
(181,10,1,344.00,3,'2019-07-13'),
(182,14,19,25.50,4,'2019-07-13'),
(183,17,4,806.55,4,'2019-07-14'),
(184,13,11,16.99,3,'2019-07-16'),
(185,6,15,11.50,3,'2019-07-16'),
(186,9,13,16.99,5,'2019-07-16'),
(187,16,1,344.00,5,'2019-07-16'),
(188,7,3,3849.00,1,'2019-07-17'),
(189,3,6,799.00,1,'2019-07-18'),
(190,20,1,344.00,1,'2019-07-18'),
(191,19,10,349.00,3,'2019-07-19'),
(192,11,18,2659.05,5,'2019-07-20'),
(193,6,10,349.00,3,'2019-07-22'),
(194,10,18,2799.00,3,'2019-07-23'),
(195,6,14,14.39,3,'2019-07-25'),
(196,2,5,2199.00,2,'2019-07-27'),
(197,3,9,1301.07,1,'2019-07-28'),
(198,12,19,25.50,4,'2019-07-28'),
(199,4,20,19.99,1,'2019-07-28'),
(200,20,7,12461.07,1,'2019-07-30'),
(201,15,2,318.60,1,'2019-08-01'),
(202,12,18,2799.00,4,'2019-08-03'),
(203,20,6,735.08,1,'2019-08-04'),
(204,8,7,13399.00,3,'2019-08-04'),
(205,5,4,849.00,2,'2019-08-05'),
(206,18,17,16.99,4,'2019-08-07'),
(207,2,14,15.99,2,'2019-08-09'),
(208,1,3,3849.00,1,'2019-08-10'),
(209,8,4,849.00,3,'2019-08-11'),
(210,1,17,15.29,1,'2019-08-11'),
(211,1,13,15.63,1,'2019-08-12'),
(212,16,14,15.03,5,'2019-08-14'),
(213,15,13,16.99,1,'2019-08-16'),
(214,13,1,309.60,3,'2019-08-17'),
(215,3,17,16.99,1,'2019-08-19'),
(216,15,1,344.00,1,'2019-08-20'),
(217,6,13,16.99,3,'2019-08-21'),
(218,1,3,3849.00,1,'2019-08-22'),
(219,3,8,1159.00,1,'2019-08-23'),
(220,8,8,1159.00,3,'2019-08-23'),
(221,5,7,13399.00,2,'2019-08-24'),
(222,17,20,19.99,4,'2019-08-25'),
(223,17,5,2199.00,4,'2019-08-25'),
(224,13,14,15.99,3,'2019-08-26'),
(225,5,19,25.50,2,'2019-08-26'),
(226,5,10,349.00,2,'2019-08-26'),
(227,7,10,349.00,1,'2019-08-28'),
(228,20,2,354.00,1,'2019-08-28'),
(229,2,13,16.99,2,'2019-08-30'),
(230,17,15,11.50,4,'2019-09-01'),
(231,15,4,849.00,1,'2019-09-02'),
(232,3,6,799.00,1,'2019-09-03'),
(233,13,14,15.99,3,'2019-09-04'),
(234,5,9,1399.00,2,'2019-09-04'),
(235,4,12,14.07,1,'2019-09-04'),
(236,12,17,15.63,4,'2019-09-04'),
(237,1,10,349.00,1,'2019-09-05'),
(238,11,15,11.50,5,'2019-09-05'),
(239,14,12,15.29,4,'2019-09-07'),
(240,6,11,15.29,3,'2019-09-09'),
(241,12,13,16.99,4,'2019-09-10'),
(242,14,13,16.99,4,'2019-09-12'),
(243,2,1,344.00,2,'2019-09-14'),
(244,4,4,772.59,1,'2019-09-14'),
(245,12,9,1399.00,4,'2019-09-14'),
(246,16,14,15.99,5,'2019-09-14'),
(247,4,3,3618.06,1,'2019-09-16'),
(248,6,5,2199.00,3,'2019-09-18'),
(249,6,10,349.00,3,'2019-09-19'),
(250,12,7,13399.00,4,'2019-09-21'),
(251,1,8,1159.00,1,'2019-09-21'),
(252,11,13,16.99,5,'2019-09-23'),
(253,18,4,781.08,4,'2019-09-25'),
(254,4,9,1399.00,1,'2019-09-26'),
(255,18,1,344.00,4,'2019-09-26'),
(256,7,14,15.99,1,'2019-09-26'),
(257,3,7,12461.07,1,'2019-09-28'),
(258,10,3,3849.00,3,'2019-09-30'),
(259,19,4,849.00,3,'2019-09-30'),
(260,14,20,19.99,4,'2019-10-02'),
(261,14,17,16.99,4,'2019-10-02'),
(262,15,5,2199.00,1,'2019-10-04'),
(263,10,4,849.00,3,'2019-10-05'),
(264,13,5,2199.00,3,'2019-10-07'),
(265,4,8,1159.00,1,'2019-10-07'),
(266,15,5,2199.00,1,'2019-10-08'),
(267,17,11,16.99,4,'2019-10-08'),
(268,14,9,1329.05,4,'2019-10-08'),
(269,13,14,15.99,3,'2019-10-09'),
(270,11,10,328.06,5,'2019-10-10'),
(271,7,19,25.50,1,'2019-10-10'),
(272,7,4,789.57,1,'2019-10-10'),
(273,7,4,849.00,1,'2019-10-12'),
(274,7,12,15.29,1,'2019-10-14'),
(275,11,15,11.50,5,'2019-10-16'),
(276,15,20,19.99,1,'2019-10-16'),
(277,12,10,349.00,4,'2019-10-16'),
(278,4,3,3849.00,1,'2019-10-18'),
(279,10,16,15.50,3,'2019-10-18'),
(280,3,19,25.50,1,'2019-10-18'),
(281,16,19,24.22,5,'2019-10-19'),
(282,13,7,13399.00,3,'2019-10-20'),
(283,4,2,354.00,1,'2019-10-21'),
(284,10,15,11.50,3,'2019-10-21'),
(285,13,15,11.50,3,'2019-10-23'),
(286,14,11,16.99,4,'2019-10-25'),
(287,9,7,12327.08,5,'2019-10-26'),
(288,18,9,1273.09,4,'2019-10-28'),
(289,14,10,349.00,4,'2019-10-29'),
(290,3,5,2199.00,1,'2019-10-29'),
(291,13,14,15.19,3,'2019-10-31'),
(292,1,16,15.50,1,'2019-11-02'),
(293,19,4,849.00,3,'2019-11-02'),
(294,16,16,15.50,5,'2019-11-02'),
(295,17,8,1159.00,4,'2019-11-02'),
(296,11,5,2199.00,5,'2019-11-04'),
(297,16,11,15.97,5,'2019-11-04'),
(298,16,14,15.99,5,'2019-11-05'),
(299,17,3,3849.00,4,'2019-11-07'),
(300,5,14,15.99,2,'2019-11-09'),
(301,1,1,344.00,1,'2019-11-10'),
(302,10,19,25.50,3,'2019-11-11'),
(303,5,11,16.99,2,'2019-11-13'),
(304,18,4,849.00,4,'2019-11-15'),
(305,18,8,1159.00,4,'2019-11-15'),
(306,7,17,16.99,1,'2019-11-17'),
(307,20,10,317.59,1,'2019-11-17'),
(308,10,5,2199.00,3,'2019-11-17'),
(309,20,17,16.99,1,'2019-11-19'),
(310,19,13,16.99,3,'2019-11-19'),
(311,5,8,1089.46,2,'2019-11-21'),
(312,17,11,15.97,4,'2019-11-23'),
(313,20,9,1329.05,1,'2019-11-24'),
(314,6,4,849.00,3,'2019-11-26'),
(315,5,8,1159.00,2,'2019-11-28'),
(316,12,4,849.00,4,'2019-11-29'),
(317,13,1,326.80,3,'2019-12-01'),
(318,18,1,316.48,4,'2019-12-02'),
(319,18,9,1399.00,4,'2019-12-03'),
(320,9,5,2199.00,5,'2019-12-04'),
(321,19,15,11.50,3,'2019-12-06'),
(322,4,3,3849.00,1,'2019-12-08'),
(323,19,2,336.30,3,'2019-12-08'),
(324,4,3,3849.00,1,'2019-12-09'),
(325,15,3,3849.00,1,'2019-12-09'),
(326,3,4,849.00,1,'2019-12-10'),
(327,17,10,349.00,4,'2019-12-12'),
(328,5,19,25.50,2,'2019-12-13'),
(329,3,1,344.00,1,'2019-12-15'),
(330,16,8,1159.00,5,'2019-12-16'),
(331,14,10,349.00,4,'2019-12-18'),
(332,19,20,19.99,3,'2019-12-20'),
(333,20,2,354.00,1,'2019-12-21'),
(334,1,2,354.00,1,'2019-12-21'),
(335,19,5,2199.00,3,'2019-12-23'),
(336,20,17,16.99,1,'2019-12-24'),
(337,12,11,16.99,4,'2019-12-26'),
(338,11,17,16.99,5,'2019-12-28'),
(339,8,20,17.99,3,'2019-12-29'),
(340,16,13,16.99,5,'2019-12-29'),
(341,16,1,344.00,5,'2019-12-30'),
(342,12,15,11.50,4,'2019-12-30'),
(343,5,18,2519.10,2,'2019-12-30'),
(344,14,12,14.53,4,'2019-12-30'),
(345,17,6,799.00,4,'2020-01-01'),
(346,16,3,3579.57,5,'2020-01-01'),
(347,16,17,16.99,5,'2020-01-03'),
(348,16,14,15.99,5,'2020-01-04'),
(349,7,16,15.50,1,'2020-01-04'),
(350,4,6,799.00,1,'2020-01-06'),
(351,8,16,14.11,3,'2020-01-06'),
(352,11,7,13399.00,5,'2020-01-08'),
(353,4,1,344.00,1,'2020-01-10'),
(354,8,17,16.99,3,'2020-01-11'),
(355,11,6,799.00,5,'2020-01-12'),
(356,5,20,19.99,2,'2020-01-14'),
(357,12,17,16.99,4,'2020-01-14'),
(358,4,8,1159.00,1,'2020-01-14'),
(359,14,8,1159.00,4,'2020-01-15'),
(360,9,20,19.99,5,'2020-01-16'),
(361,12,20,18.19,4,'2020-01-17'),
(362,17,16,13.95,4,'2020-01-18'),
(363,17,20,17.99,4,'2020-01-20'),
(364,7,13,15.63,1,'2020-01-22'),
(365,7,17,16.99,1,'2020-01-23'),
(366,19,11,16.99,3,'2020-01-25'),
(367,6,19,25.50,3,'2020-01-26'),
(368,3,3,3849.00,1,'2020-01-26'),
(369,2,9,1399.00,2,'2020-01-26'),
(370,18,8,1159.00,4,'2020-01-28'),
(371,2,4,849.00,2,'2020-01-30'),
(372,12,15,11.50,4,'2020-01-31'),
(373,6,4,781.08,3,'2020-02-02'),
(374,8,3,3849.00,3,'2020-02-04'),
(375,10,1,323.36,3,'2020-02-06'),
(376,8,5,2199.00,3,'2020-02-06'),
(377,16,18,2799.00,5,'2020-02-07'),
(378,11,9,1399.00,5,'2020-02-09'),
(379,6,17,15.63,3,'2020-02-10'),
(380,2,13,15.97,2,'2020-02-10'),
(381,2,2,354.00,2,'2020-02-10'),
(382,14,2,354.00,4,'2020-02-12'),
(383,5,13,16.99,2,'2020-02-12'),
(384,18,8,1159.00,4,'2020-02-12'),
(385,8,13,16.99,3,'2020-02-14'),
(386,15,2,354.00,1,'2020-02-15'),
(387,4,16,15.50,1,'2020-02-16'),
(388,6,13,16.99,3,'2020-02-16'),
(389,10,9,1399.00,3,'2020-02-18'),
(390,18,18,2799.00,4,'2020-02-18'),
(391,15,17,16.99,1,'2020-02-20'),
(392,19,11,16.99,3,'2020-02-22'),
(393,18,11,16.99,4,'2020-02-22'),
(394,11,6,799.00,5,'2020-02-22'),
(395,4,10,349.00,1,'2020-02-23'),
(396,15,6,799.00,1,'2020-02-23'),
(397,9,9,1259.10,5,'2020-02-23'),
(398,20,19,23.21,1,'2020-02-25'),
(399,10,17,16.99,3,'2020-02-27'),
(400,11,2,354.00,5,'2020-02-28'),
(401,8,3,3849.00,3,'2020-03-01'),
(402,9,20,19.99,5,'2020-03-02'),
(403,10,2,354.00,3,'2020-03-02'),
(404,8,4,849.00,3,'2020-03-02'),
(405,1,17,15.80,1,'2020-03-02'),
(406,19,6,799.00,3,'2020-03-04'),
(407,2,20,19.99,2,'2020-03-05'),
(408,20,5,2199.00,1,'2020-03-07'),
(409,13,6,799.00,3,'2020-03-08'),
(410,17,20,19.99,4,'2020-03-09'),
(411,12,14,15.03,4,'2020-03-09'),
(412,1,17,15.63,1,'2020-03-09'),
(413,16,10,349.00,5,'2020-03-09'),
(414,8,13,16.99,3,'2020-03-11'),
(415,4,16,15.50,1,'2020-03-13'),
(416,16,5,1979.10,5,'2020-03-14'),
(417,12,13,15.46,4,'2020-03-14'),
(418,6,11,15.80,3,'2020-03-14'),
(419,3,9,1399.00,1,'2020-03-16'),
(420,11,11,16.99,5,'2020-03-17'),
(421,18,2,318.60,4,'2020-03-17'),
(422,4,3,3849.00,1,'2020-03-17'),
(423,3,9,1399.00,1,'2020-03-17'),
(424,7,11,16.99,1,'2020-03-17'),
(425,14,10,349.00,4,'2020-03-17'),
(426,20,12,15.29,1,'2020-03-18'),
(427,9,5,2089.05,5,'2020-03-18'),
(428,2,10,349.00,2,'2020-03-20'),
(429,17,13,15.97,4,'2020-03-22'),
(430,14,20,19.99,4,'2020-03-22'),
(431,11,18,2799.00,5,'2020-03-24'),
(432,1,4,849.00,1,'2020-03-25'),
(433,10,9,1399.00,3,'2020-03-25'),
(434,6,18,2799.00,3,'2020-03-25'),
(435,1,14,15.99,1,'2020-03-27'),
(436,16,16,15.50,5,'2020-03-29'),
(437,9,9,1301.07,5,'2020-03-30'),
(438,19,8,1159.00,3,'2020-04-01'),
(439,16,15,10.58,5,'2020-04-02'),
(440,17,2,354.00,4,'2020-04-03'),
(441,1,2,336.30,1,'2020-04-04'),
(442,16,1,313.04,5,'2020-04-06'),
(443,14,7,12595.06,4,'2020-04-06'),
(444,9,6,799.00,5,'2020-04-08'),
(445,9,3,3849.00,5,'2020-04-10'),
(446,7,18,2799.00,1,'2020-04-11'),
(447,7,15,10.58,1,'2020-04-12'),
(448,6,1,316.48,3,'2020-04-13'),
(449,10,20,19.99,3,'2020-04-15'),
(450,9,5,2199.00,5,'2020-04-17'),
(451,12,14,14.87,4,'2020-04-17'),
(452,9,13,16.99,5,'2020-04-17'),
(453,8,10,331.55,3,'2020-04-19'),
(454,8,8,1159.00,3,'2020-04-20'),
(455,11,10,349.00,5,'2020-04-21'),
(456,19,14,15.99,3,'2020-04-21'),
(457,10,10,349.00,3,'2020-04-23'),
(458,6,20,19.99,3,'2020-04-24'),
(459,8,19,25.50,3,'2020-04-26'),
(460,2,2,322.14,2,'2020-04-27'),
(461,15,14,14.55,1,'2020-04-28'),
(462,4,3,3541.08,1,'2020-04-30'),
(463,17,3,3849.00,4,'2020-05-01'),
(464,8,12,15.29,3,'2020-05-03'),
(465,18,14,15.99,4,'2020-05-04'),
(466,18,14,15.99,4,'2020-05-04'),
(467,18,15,11.50,4,'2020-05-06'),
(468,10,6,743.07,3,'2020-05-07'),
(469,16,12,14.37,5,'2020-05-07'),
(470,17,5,2023.08,4,'2020-05-08'),
(471,2,6,799.00,2,'2020-05-08'),
(472,13,16,15.50,3,'2020-05-08'),
(473,11,4,849.00,5,'2020-05-10'),
(474,19,11,16.99,3,'2020-05-10'),
(475,9,19,25.50,5,'2020-05-11'),
(476,16,19,22.95,5,'2020-05-12'),
(477,3,12,15.29,1,'2020-05-12'),
(478,7,15,11.50,1,'2020-05-12'),
(479,1,18,2799.00,1,'2020-05-12'),
(480,10,4,849.00,3,'2020-05-14'),
(481,10,9,1315.06,3,'2020-05-14'),
(482,5,20,19.99,2,'2020-05-14'),
(483,13,2,354.00,3,'2020-05-15'),
(484,6,13,16.99,3,'2020-05-16'),
(485,9,1,344.00,5,'2020-05-17'),
(486,15,11,16.99,1,'2020-05-19'),
(487,10,11,16.99,3,'2020-05-19'),
(488,14,14,15.03,4,'2020-05-19'),
(489,12,13,16.99,4,'2020-05-20'),
(490,8,9,1399.00,3,'2020-05-20'),
(491,15,15,11.50,1,'2020-05-22'),
(492,20,16,13.95,1,'2020-05-22'),
(493,2,1,344.00,2,'2020-05-24'),
(494,2,16,15.50,2,'2020-05-25'),
(495,19,7,13399.00,3,'2020-05-25'),
(496,17,4,849.00,4,'2020-05-27'),
(497,14,17,15.63,4,'2020-05-27'),
(498,2,15,11.50,2,'2020-05-27'),
(499,2,6,799.00,2,'2020-05-27'),
(500,12,16,14.26,4,'2020-05-29');

--seperating the code for assigning the stock levels by store for readability
INSERT INTO Warehouse_Item VALUES
(1,1,5),
(1,2,3),
(1,3,0),
(1,4,1),
(1,5,4),
(1,6,0),
(1,7,1),
(1,8,0),
(1,9,2),
(1,10,4),
(1,11,10),
(1,12,5),
(1,13,19),
(1,14,11),
(1,15,7),
(1,16,20),
(1,17,9),
(1,18,0),
(1,19,7),
(1,20,15);

INSERT INTO Warehouse_Item VALUES
(2,1,0),
(2,2,4),
(2,3,1),
(2,4,2),
(2,5,2),
(2,6,4),
(2,7,0),
(2,8,2),
(2,9,3),
(2,10,4),
(2,11,1),
(2,12,8),
(2,13,11),
(2,14,4),
(2,15,18),
(2,16,9),
(2,17,5),
(2,18,11),
(2,19,19),
(2,20,0);

INSERT INTO Warehouse_Item VALUES
(3,1,3),
(3,2,2),
(3,3,3),
(3,4,1),
(3,5,4),
(3,6,0),
(3,7,3),
(3,8,1),
(3,9,0),
(3,10,2),
(3,11,10),
(3,12,2),
(3,13,16),
(3,14,13),
(3,15,0),
(3,16,11),
(3,17,16),
(3,18,15),
(3,19,18),
(3,20,6);

INSERT INTO Warehouse_Item VALUES
(4,1,1),
(4,2,1),
(4,3,0),
(4,4,1),
(4,5,0),
(4,6,4),
(4,7,5),
(4,8,2),
(4,9,4),
(4,10,3),
(4,11,0),
(4,12,9),
(4,13,5),
(4,14,14),
(4,15,17),
(4,16,2),
(4,17,13),
(4,18,9),
(4,19,4),
(4,20,2);

INSERT INTO Warehouse_Item VALUES
(5,1,2),
(5,2,2),
(5,3,3),
(5,4,1),
(5,5,1),
(5,6,2),
(5,7,1),
(5,8,2),
(5,9,1),
(5,10,0),
(5,11,4),
(5,12,7),
(5,13,4),
(5,14,12),
(5,15,12),
(5,16,3),
(5,17,1),
(5,18,4),
(5,19,17),
(5,20,18);


INSERT INTO Delivery VALUES
(1,1,'2019-01-02',15),
(2,5, '2019-01-06',17),
(3,10, '2019-01-07',9),
(4,15, '2019-01-11',13),
(5,22, '2019-01-18',14),
(6,30, '2019-01-19',15),
(7,39, '2019-01-19',16),
(8,48, '2019-01-28',10),
(9,72, '2019-02-05',14),
(10,98, '2019-02-19',16);


--this is a function to automatically get the next Customer ID sequentially
CREATE OR REPLACE FUNCTION get_ID()
	RETURNS SMALLINT
	LANGUAGE plpgsql
AS 
$$
DECLARE ident Customer.Customer_ID%type;
	
BEGIN
	
	SELECT MAX(Customer_ID)
	FROM Customer
	INTO ident;
	ident := ident + 1;
	RETURN ident;
END;
$$;

--this is the procedure to add a new customer to the database
--https://www.janbasktraining.com/blog/insert-multiple-rows-in-sql/
--https://tutorialslink.com/Articles/How-to-call-a-SQL-function-with-a-Stored-Procedure/1633
CREATE OR REPLACE PROCEDURE register_customer(
Customer_Surname VARCHAR(20), 
Customer_Forename VARCHAR(20),
Customer_Phone VARCHAR(11),
Customer_House_No_Name VARCHAR(20),
Customer_Street VARCHAR(30),
Customer_Town VARCHAR(30),
Customer_County VARCHAR(26),
Customer_Postcode VARCHAR(7)
)
LANGUAGE plpgsql
AS $$
DECLARE
	ident SMALLINT;
	
BEGIN
	SELECT get_ID() INTO ident;
	--here is code to check the surname, forename, house no/name, street, town and county for null or blank values
	--if a null or blank value is found then it raises an exception
	IF Customer_Surname IS NULL THEN
		RAISE EXCEPTION 'Customer surname value cannot be null!';
	ELSIF Customer_Surname = '' THEN
		RAISE EXCEPTION 'Customer surname value cannot be blank!';
	END IF;
	IF Customer_Forename IS NULL THEN
		RAISE EXCEPTION 'Customer forename value cannot be null!';
	ELSIF Customer_Forename = '' THEN
		RAISE EXCEPTION 'Customer forename value cannot be blank!';
	END IF;
	IF Customer_House_No_Name IS NULL THEN
		RAISE EXCEPTION 'Customer house No/Name value cannot be null!';
	ELSIF Customer_House_No_Name = '' THEN
		RAISE EXCEPTION 'Customer house No/Name value cannot be blank!';
	END IF;
	IF Customer_Street IS NULL THEN
		RAISE EXCEPTION 'Customer street value cannot be null!';
	ELSIF Customer_Street = '' THEN
		RAISE EXCEPTION 'Customer street value cannot be blank!';
	END IF;
	IF Customer_Town IS NULL THEN
		RAISE EXCEPTION 'Customer town value cannot be null!';
	ELSIF Customer_Town = '' THEN
		RAISE EXCEPTION 'Customer town value cannot be blank!';
	END IF;
	IF Customer_County IS NULL THEN
		RAISE EXCEPTION 'Customer county value cannot be null!';
	ELSIF Customer_County = '' THEN
		RAISE EXCEPTION 'Customer county value cannot be blank!';
	END IF;
	--this is code to check if the phonenumber is not null, blank or is non numeric
	--https://stackoverflow.com/questions/19975257/postgres-query-to-check-a-string-is-a-number
	IF Customer_Phone IS NULL THEN
		RAISE EXCEPTION 'Customer phone number value cannot be null!';
	ELSIF Customer_Phone = '' THEN
		RAISE EXCEPTION 'Customer phone number value cannot be blank!';
	ELSIF Customer_Phone ~ '^\d+(\.\d+)?$' = FALSE THEN
		RAISE EXCEPTION 'Customer phone number cannot contain non numeric characters!';
	END IF;
	--this is code to check if the postcode is valid
	--due to the way uk postcodes are created and their variable length it is difficult and unwieldy to validate them accurately
	--so in lieu of this I check whether the postcode starts with a letter and is 5 or greater characters in length
	--as if either of these are not in place then you cannot have a legitimate postcode
	--https://www.w3schools.com/SQL/func_sqlserver_substring.asp
	IF Customer_Postcode IS NULL THEN
		RAISE EXCEPTION 'Customer postcode value cannot be null!';
	ELSIF Customer_Postcode = '' THEN
		RAISE EXCEPTION 'Customer postcode value cannot be blank!';
	ELSIF SUBSTRING(Customer_Postcode, 1, 1) ~ '[A-Za-z]' = FALSE THEN
		RAISE EXCEPTION 'Customer postcode value must start with a letter!';
	ELSIF LENGTH(Customer_Postcode) < 5 THEN
		RAISE EXCEPTION 'Customer postcode value is too short!';
	END IF;
	
	INSERT INTO Customer VALUES (ident,
	Customer_Surname,
	Customer_Forename,
	Customer_Phone,
	Customer_House_No_Name,
	Customer_Street,
	Customer_Town,
	Customer_County,
	Customer_Postcode);
	RAISE NOTICE 'Customer % % registered successfully!', Customer_Forename, Customer_Surname;

END;
$$;

--this is a function for getting the next transaction ID, similar to the customer one
CREATE OR REPLACE FUNCTION get_transaction_ID()
	RETURNS BIGINT
	LANGUAGE plpgsql
AS 
$$
DECLARE ident Transaction_Sale.Transaction_ID%type;
	
BEGIN
	
	SELECT MAX(Transaction_ID)
	FROM Transaction_Sale
	INTO ident;
	ident := ident + 1;
	RETURN ident;
END;
$$;

--this is a function for checking whether the selected store has stock
CREATE OR REPLACE FUNCTION check_stock(store INT, product INT)
	RETURNS INT
	LANGUAGE plpgsql
AS
$$
DECLARE 
	stock_level INT;

BEGIN

	SELECT Product_Quantity
	FROM Warehouse_Item
	WHERE Store_ID = store
	AND product_ID = product
	INTO stock_level;
	RETURN stock_level;
	
END;
$$;

--this is a function for getting the next delivery ID, similar to the customer one
CREATE OR REPLACE FUNCTION get_delivery_ID()
	RETURNS BIGINT
	LANGUAGE plpgsql
AS 
$$
DECLARE ident Delivery.Delivery_ID%type;
	
BEGIN
	
	SELECT MAX(Delivery_ID)
	FROM Delivery
	INTO ident;
	ident := ident + 1;
	RETURN ident;
END;
$$;


CREATE OR REPLACE PROCEDURE purchase_product(
	customerID INT,
	storeID INT,
	productID INT,
	sale_date DATE,
	delivery CHAR(1),
	--using default null values allows the delivery date and hour to be blank if the customer is
	--buying something that doesn't require delivery
	delivery_date DATE default NULL,
	delivery_hour INT default NULL)
	
LANGUAGE plpgsql

AS 
$$

DECLARE 
	ident BIGINT;
	deliveryident BIGINT;
	price DECIMAL(8,2);
	quantity INT;
	storename VARCHAR;
	productname VARCHAR;
	storerec RECORD;
	storestring TEXT default '';
	-- I use a cursor to find store names where the selected product is in stock if it's not at the requested store
	storecursor CURSOR(prodID int) FOR
		SELECT s.store_name
		FROM Warehouse_Item w, Store s
		WHERE prodID = Product_ID
		AND Product_Quantity > 0
		AND s.Store_ID = w.Store_ID;
	

BEGIN
	--There now follows code to make sure the product, store and customer IDs exist and are not null
	--I am aware that the transaction would fail without this code anyhow but writing this code makes it more
	--user friendly as I can display an error message that informs the user what the problem was
	--https://stackoverflow.com/questions/50873942/sql-how-to-check-if-record-exists-in-table
	IF customerID IS NULL THEN
		RAISE EXCEPTION 'Customer ID value cannot be null!';
	ELSIF storeID IS NULL THEN
		RAISE EXCEPTION 'Store ID value cannot be null!';
	ELSIF productID IS NULL THEN
		RAISE EXCEPTION 'Product ID value cannot be null!';
	ELSIF delivery IS NULL THEN
		RAISE EXCEPTION 'Delivery value (y/n) cannot be null!';
	ELSIF NOT EXISTS (SELECT 1 FROM Customer WHERE customerID = Customer_ID) THEN
		RAISE EXCEPTION 'Customer ID does not exist!';
	ELSIF NOT EXISTS (SELECT 1 FROM Store WHERE storeID = Store_ID) THEN
		RAISE EXCEPTION 'Store ID does not exist!';
	ELSIF NOT EXISTS (SELECT 1 FROM Product WHERE productID = Product_ID) THEN
		RAISE EXCEPTION 'Product ID does not exist!';
	END IF;
		
	SELECT store_name FROM Store
	WHERE storeID = store_ID
	INTO storename;
	SELECT product_name FROM Product
	WHERE productID = Product_ID
	INTO productname;
--this block checks stock using my function and raises an appropriate notice/exception if there is no stock available
	SELECT check_stock(storeID,productID)
	INTO quantity;
	IF quantity = 0 THEN 
		
		--using the cursor to fetch all the store names
		OPEN storecursor(productID);
		LOOP
			FETCH storecursor INTO storerec;
			EXIT WHEN NOT FOUND;
			storestring := storestring || storerec.store_name || ' ';
		END LOOP;

		CLOSE storecursor;

		RAISE NOTICE 'No stock of % at the % store!',productname, storename;
		RAISE NOTICE 'Here is a list of stores that do have stock of %:',productname;
		RAISE NOTICE '%', storestring;
		RAISE EXCEPTION 'Please try again!';

	END IF;
	
	--now that we've established the store has stock the transaction can take place
	SELECT get_transaction_ID() INTO ident;

	--it is important to make a copy of the price of the item in the transaction_sale
	--table rather than link it directly as if the price changes in the future then it
	--will affect all previous sales as well
	SELECT Product_Cost FROM Product
	WHERE Product_ID = productID
	INTO price;

	--this section updates the stock level for the item being bought at the store it is
	--being bought from
	UPDATE Warehouse_Item
	SET Product_Quantity = Product_Quantity - 1
	WHERE storeID = Store_ID
	AND productID = Product_ID;

	INSERT INTO Transaction_Sale VALUES(
	ident,
	customerID,
	productID,
	price,
	storeID,
	sale_date);
	
	--Now follows code to handle validation etc if delivery is required
	IF delivery = 'y' THEN
		--https://stackoverflow.com/questions/17666159/check-if-a-date-is-upcoming-or-past-in-mysql
		IF delivery_date <= CURRENT_DATE THEN
			RAISE EXCEPTION 'Delivery date cannot be in the past!';
		ELSIF delivery_hour <9 OR delivery_hour >17 THEN
			RAISE EXCEPTION 'Delivery hour is not valid! We only deliver between 0900 and 1700 hours!';
		END IF;
		
		SELECT get_delivery_id() INTO deliveryident;
		INSERT INTO Delivery VALUES(
		deliveryident,
		ident,
		delivery_date,
		delivery_hour);
		RAISE NOTICE 'Delivery booked in for % at %00 hours',delivery_date, delivery_hour;

	END IF;
	RAISE NOTICE 'Transaction of % at % store for £% complete!', productname, storename, price ;

END;
$$;

CREATE OR REPLACE PROCEDURE transfer_stock(
	storegiverID INT,
	productID INT,
	storereceiverID INT,
	requestedquantity INT)
	
LANGUAGE plpgsql

AS 
$$

DECLARE
	quantity INT;
	storename VARCHAR;
	productname VARCHAR;
	storereceivername VARCHAR;

BEGIN
	--There now follows code to make sure the product and store IDs exist as well as preventing the same
	--store being used as the transferer and the receiver
	IF storegiverID IS NULL THEN
		RAISE EXCEPTION 'Sending store ID value cannot be null!';
	ELSIF storereceiverID IS NULL THEN
		RAISE EXCEPTION 'Receiving store ID value cannot be null!';
	ELSIF productID IS NULL THEN
		RAISE EXCEPTION 'Product ID value cannot be null!';
	ELSIF requestedquantity IS NULL THEN
		RAISE EXCEPTION 'Requested quantity value cannot be null!';	
	ELSIF NOT EXISTS (SELECT 1 FROM Store WHERE storegiverID = Store_ID) THEN
		RAISE EXCEPTION 'The Store ID of the store transferring the stock does not exist!';
	ELSIF NOT EXISTS (SELECT 1 FROM Store WHERE storereceiverID = Store_ID) THEN
		RAISE EXCEPTION 'The Store ID of the store receiving the stock does not exist!';
	ELSIF NOT EXISTS (SELECT 1 FROM Product WHERE productID = Product_ID) THEN
		RAISE EXCEPTION 'Product ID does not exist!';
	ELSIF storegiverID = storereceiverID THEN
		RAISE EXCEPTION 'Cannot transfer to and from the same store!';
	ELSIF requestedquantity < 1 THEN
		RAISE EXCEPTION 'Requested quantity must be at least 1!';
	END IF;
	SELECT store_name FROM Store
	WHERE storegiverID = store_ID
	INTO storename;
	SELECT product_name FROM Product
	WHERE productID = Product_ID
	INTO productname;
	SELECT store_name FROM Store
	WHERE storereceiverID = store_ID
	INTO storereceivername;
	
	
--this block checks stock using my function and raises an appropriate notice/exception if there is no stock available
	SELECT check_stock(storegiverID,productID)
	INTO quantity;
	IF quantity < requestedquantity THEN 
		
		RAISE NOTICE 'Not enough stock of % at the % store to complete the transfer!',productname, storename;
		RAISE EXCEPTION 'Please try again!';

	END IF;
	
	--now that we've established the store has sufficient stock the transaction can take place
	UPDATE Warehouse_Item
	SET Product_Quantity = Product_Quantity - requestedquantity
	WHERE storegiverID = Store_ID
	AND productID = Product_ID;
	UPDATE Warehouse_Item
	SET Product_Quantity = Product_Quantity + requestedquantity
	WHERE storereceiverID = Store_ID
	AND productID = Product_ID;
	RAISE NOTICE 'Transfer of % units of % from % store to % store complete!', requestedquantity, productname, storename, storereceivername;

END;
$$;


--This is a function that will generate a total sales value for one or many stores
--between 2 selected dates. I had to write it as a function because it is not possible
--to pass an array of text as a parameter to a stored procedure, and passing an array of 
--text allows the user to put 1 or many store id's in to the function.
--When using this function please do check the messages as I have raised several notices
--with the requested information
--https://marxsoftware.blogspot.com/2015/09/passing-array-to-plpgsql-function.html
--https://github.com/vladmihalcea/hibernate-types/issues/61
CREATE OR REPLACE FUNCTION generate_report(
	start_date DATE,
	end_date DATE,
	storeIDs TEXT[])
	RETURNS DECIMAL(15,2)

LANGUAGE plpgsql

AS 
$$

DECLARE

	totalstoresales DECIMAL (15,2) := 0;
	totalsales DECIMAL(15,2) = 0;
	storename VARCHAR;
	numberofstores INT := array_length(storeIDs,1);
	storesindex INT := 1;
	
BEGIN

	IF start_date IS NULL THEN
		RAISE EXCEPTION 'Start date value cannot be null!';
	ELSIF end_date IS NULL THEN
		RAISE EXCEPTION 'End date value cannot be null!';
	ELSIF start_date > end_date THEN
		RAISE EXCEPTION 'Start date cannot be after end date!';
	ELSIF start_date > CURRENT_DATE THEN
		RAISE EXCEPTION 'Start date cannot be after today''s date!';
	ELSIF end_date> CURRENT_DATE THEN
		RAISE EXCEPTION 'End date cannot be after today''s date!';
	END IF;
	WHILE storesindex <= numberofstores LOOP
		IF NOT EXISTS (SELECT 1 FROM Store WHERE CAST(storeIDs[storesindex] AS INT) = Store_ID) THEN
			RAISE EXCEPTION 'The Store ID % does not exist!', storeIDs[storesindex];
		END IF;
		SELECT SUM(Product_Cost) FROM Transaction_Sale
		WHERE CAST(storeIDs[storesindex] AS INT) = Store_ID
		AND start_date < Transaction_Date
		AND end_date > Transaction_Date
		INTO totalstoresales;
		IF totalstoresales IS NULL THEN totalstoresales = 0;
		END IF;
		SELECT Store_Name FROM Store
		WHERE CAST(storeIDs[storesindex] AS INT) = store_ID
		INTO storename;
		RAISE NOTICE 'The total sales of the % store between % and % is £%',storename, start_date, end_date, totalstoresales;
		totalsales = totalsales + totalstoresales;
		storesindex = storesindex + 1;
		
	END LOOP;
	RAISE NOTICE 'The total sales of all selected stores between % and % is £%', start_date, end_date, totalsales;
	RETURN totalsales;
	
END;
$$;

/*
Testing block
Here are all the calls to the procedures I've created to test the functionality
I have put double dashes before each line so that you may quickly and easily activate
a particular test by simply deleting the double dashes
*/

--testing the customer registration procedure
--CALL register_customer('Parris', 'Daniel', '01234567891', '6a', 'Brook Street', 'Polegate', 'East Sussex', 'BN266BG');

--testing for invalid surnames
--CALL register_customer(Null, 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');
--CALL register_customer('', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');

--testing for invalid forenames
--CALL register_customer('Russo', Null, '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');
--CALL register_customer('Russo', '', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');

--testing for invalid house number/names
--CALL register_customer('Russo', 'Adnan', '01279512278', Null, 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');
--CALL register_customer('Russo', 'Adnan', '01279512278', '', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');

--testing for invalid streets
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', Null, 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', '', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');

--testing for invalid towns
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', Null, 'Hertfordshire', 'CM210EP');
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', '', 'Hertfordshire', 'CM210EP');

--testing for invalid counties
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', Null, 'CM210EP');
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', '', 'CM210EP');

--testing for invalid phone numbers
--CALL register_customer('Russo', 'Adnan', NULL, '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');
--CALL register_customer('Russo', 'Adnan', '', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');
--CALL register_customer('Russo', 'Adnan', 'g279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');
--CALL register_customer('Russo', 'Adnan', '0127951h278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');
--CALL register_customer('Russo', 'Adnan', '012795/2278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');

--testing for invalid postcodes
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', Null);
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', '');
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', '2M210EP');
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'C0EP');

--testing the unique constraint
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');

--testing to see what would happen if some values were omitted
--CALL register_customer('Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire', 'CM210EP');
--CALL register_customer('Russo', 'Adnan', '01279512278', '55', 'Burnside', 'Sawbridgeworth', 'Hertfordshire');

--select statements so you can see the amended tables after the procedure call(s)
--SELECT * FROM Customer;


--testing the purchase_product procedure

--testing it to make sure it works
--CALL purchase_product(2,4,10,'2020-07-21','n');

--testing for null values
--CALL purchase_product(null,4,10,'2020-07-21','n');
--CALL purchase_product(2,null,10,'2020-07-21','n');
--CALL purchase_product(2,4,null,'2020-07-21','n');
--CALL purchase_product(2,4,10,'2020-07-21',null);

--testing to see if the procedure handles instances where the store has 0 stock correctly
--CALL purchase_product(2,5,10,'2020-07-21','n')


--testing the delivery option to make sure it works
--CALL purchase_product(2,3,20,'2020-07-21','y','2022-04-12', 12);
--CALL purchase_product(2,4,10,'2020-07-21','y','2022-04-12', 13);

--testing to see if procedure handles invalid customer/store/product ID's correctly
--CALL purchase_product(25,4,10,'2020-07-21','y','2022-04-12', 14);
--CALL purchase_product(20,25,10,'2020-07-21','y','2022-04-12', 14);
--CALL purchase_product(20,4,25,'2020-07-21','y','2022-04-12', 14);

--testing to see if delivery dates in the past are not allowed
--CALL purchase_product(2,4,10,'2020-07-21','y','2021-04-12', 14);

--testing to see if invalid delivery hour handled correctly (valid delivery hours are 9-17)
--CALL purchase_product(2,4,10,'2020-07-21','y','2022-04-12', 18);
--CALL purchase_product(2,4,10,'2020-07-21','y','2022-04-12', 8);
--CALL purchase_product(2,4,10,'2020-07-21','y','2022-04-12', 0);

--select statements so you can see the amended tables after the procedure call(s)
--SELECT * FROM Transaction_sale;
--SELECT * FROM Delivery;

--testing the stock transfer procedure
--CALL transfer_stock(2,15,3,5);

--testing to see if the procedure handles instances where the giving store has not enough stock
--CALL transfer_stock(3,15,2,5)

--testing to see if the procedure handles instances where the giving store is also the receiving store
--CALL transfer_stock(3,15,3,5)

--testing to see if it can handle invalid quantity values
--CALL transfer_stock(2,15,3,0);
--CALL transfer_stock(2,15,3,-4);

--testing to see if it can handle null values
--CALL transfer_stock(null,15,3,0);
--CALL transfer_stock(2,null,3,0);
--CALL transfer_stock(2,15,null,0);
--CALL transfer_stock(2,15,3,null);

--select statements so you can see the amended tables after the procedure call(s)
--SELECT * FROM Warehouse_Item;

--testing the generate report function to make sure it works
--SELECT generate_report('2019-01-23', '2020-12-23', CAST('{1,2}' AS TEXT[]));
--SELECT generate_report('2019-01-23', '2020-12-23', CAST('{2,3,4}' AS TEXT[]));
--SELECT generate_report('2019-01-23', '2020-12-23', CAST('{1}' AS TEXT[]));

--testing to see if it handles invalid start/end dates correctly
--SELECT generate_report('2020-01-23', '2019-12-23', CAST('{1}' AS TEXT[]));
--SELECT generate_report('2022-01-23', '2022-12-23', CAST('{1}' AS TEXT[]));
--SELECT generate_report('2021-01-23', '2022-12-23', CAST('{1}' AS TEXT[]));

--testing to see if it handles store IDs that don't exist
--SELECT generate_report('2021-01-23', '2021-06-23', CAST('{6}' AS TEXT[]));
--SELECT generate_report('2021-01-23', '2021-06-23', CAST('{1,6}' AS TEXT[]));
--SELECT generate_report('2021-01-23', '2021-06-23', CAST('{6,1,2,3}' AS TEXT[]));

--SELECT generate_report('', '2020-12-23', CAST('{1,2}' AS TEXT[]));
--SELECT generate_report(null, '2020-12-23', CAST('{1,2}' AS TEXT[]));
--SELECT generate_report('2019-01-23', null, CAST('{1,2}' AS TEXT[]));
--SELECT generate_report('2019-01-23', '2020-12-23', '');


/* Python code for generating transaction data
import pandas as pd
from datetime import datetime
import random
prices = [344, 354, 3849, 849, 2199, 799, 13399, 1159, 1399, 349, 16.99, 15.29, 16.99, 15.99, 11.50, 15.50, 16.99, 2799, 25.50, 19.99]
stores = [1,2,1,1,2,3,1,3,5,3,5,4,3,4,1,5,4,4,3,1]
dates = pd.date_range(start="2019-01-01",end="2020-12-31")
dateformat = []
for i in dates:
    dateformat.append(i.strftime('%Y-%m-%d'))

datecounter = 0
    
for count in range (1, 501):
    
    customer = random.randint(1,20)
    product = random.randint(1,20)
    discount = random.randint(1,4)
    if discount == 1:
        price = prices[product-1] * (1 - (random.randint(5,10) / 100))
       
    else:
        price = (prices[product-1])
    format_price ="{:.2f}".format(price)
    
    store = stores[customer-1]
    date = dates[datecounter]
    datecounter += random.randint(0,2)
    
    print ("({},{},{},{},{},'{}'),".format(count, customer, product, format_price, store, str(date)[:10]))
*/


